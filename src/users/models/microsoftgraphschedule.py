# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Microsoftgraphschedule(Model):
    """Microsoftgraphschedule.

    :param id:
    :type id: str
    :param enabled:
    :type enabled: bool
    :param time_zone:
    :type time_zone: str
    :param provision_status: Possible values include: 'NotStarted', 'Running',
     'Completed', 'Failed'
    :type provision_status: str or ~users.models.enum
    :param provision_status_code:
    :type provision_status_code: str
    :param workforce_integration_ids:
    :type workforce_integration_ids: list[str]
    :param shifts:
    :type shifts: list[~users.models.Microsoftgraphshift]
    :param open_shifts:
    :type open_shifts: list[~users.models.MicrosoftgraphopenShift]
    :param times_off:
    :type times_off: list[~users.models.MicrosoftgraphtimeOff]
    :param time_off_reasons:
    :type time_off_reasons: list[~users.models.MicrosoftgraphtimeOffReason]
    :param scheduling_groups:
    :type scheduling_groups: list[~users.models.MicrosoftgraphschedulingGroup]
    :param swap_shifts_change_requests:
    :type swap_shifts_change_requests:
     list[~users.models.MicrosoftgraphswapShiftsChangeRequest]
    :param open_shift_change_requests:
    :type open_shift_change_requests:
     list[~users.models.MicrosoftgraphopenShiftChangeRequest]
    :param time_off_requests:
    :type time_off_requests: list[~users.models.MicrosoftgraphtimeOffRequest]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'provision_status': {'key': 'provisionStatus', 'type': 'str'},
        'provision_status_code': {'key': 'provisionStatusCode', 'type': 'str'},
        'workforce_integration_ids': {'key': 'workforceIntegrationIds', 'type': '[str]'},
        'shifts': {'key': 'shifts', 'type': '[Microsoftgraphshift]'},
        'open_shifts': {'key': 'openShifts', 'type': '[MicrosoftgraphopenShift]'},
        'times_off': {'key': 'timesOff', 'type': '[MicrosoftgraphtimeOff]'},
        'time_off_reasons': {'key': 'timeOffReasons', 'type': '[MicrosoftgraphtimeOffReason]'},
        'scheduling_groups': {'key': 'schedulingGroups', 'type': '[MicrosoftgraphschedulingGroup]'},
        'swap_shifts_change_requests': {'key': 'swapShiftsChangeRequests', 'type': '[MicrosoftgraphswapShiftsChangeRequest]'},
        'open_shift_change_requests': {'key': 'openShiftChangeRequests', 'type': '[MicrosoftgraphopenShiftChangeRequest]'},
        'time_off_requests': {'key': 'timeOffRequests', 'type': '[MicrosoftgraphtimeOffRequest]'},
    }

    def __init__(self, id=None, enabled=None, time_zone=None, provision_status=None, provision_status_code=None, workforce_integration_ids=None, shifts=None, open_shifts=None, times_off=None, time_off_reasons=None, scheduling_groups=None, swap_shifts_change_requests=None, open_shift_change_requests=None, time_off_requests=None):
        super(Microsoftgraphschedule, self).__init__()
        self.id = id
        self.enabled = enabled
        self.time_zone = time_zone
        self.provision_status = provision_status
        self.provision_status_code = provision_status_code
        self.workforce_integration_ids = workforce_integration_ids
        self.shifts = shifts
        self.open_shifts = open_shifts
        self.times_off = times_off
        self.time_off_reasons = time_off_reasons
        self.scheduling_groups = scheduling_groups
        self.swap_shifts_change_requests = swap_shifts_change_requests
        self.open_shift_change_requests = open_shift_change_requests
        self.time_off_requests = time_off_requests
