# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from .operations.users_operations import UsersOperations
from . import models


class UsersUserConfiguration(Configuration):
    """Configuration for UsersUser
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param top: Show only the first n items
    :type top: int
    :param search: Search items by search phrases
    :type search: str
    :param str base_url: Service URL
    """

    def __init__(
            self, top=None, search=None, base_url=None):

        if not base_url:
            base_url = 'https://graph.microsoft.com/Beta'

        super(UsersUserConfiguration, self).__init__(base_url)

        self.add_user_agent('usersuser/{}'.format(VERSION))

        self.top = top
        self.search = search


class UsersUser(object):
    """UsersUser

    :ivar config: Configuration for client.
    :vartype config: UsersUserConfiguration

    :ivar users: Users operations
    :vartype users: users.operations.UsersOperations

    :param top: Show only the first n items
    :type top: int
    :param search: Search items by search phrases
    :type search: str
    :param str base_url: Service URL
    """

    def __init__(
            self, top=None, search=None, base_url=None):

        self.config = UsersUserConfiguration(top, search, base_url)
        self._client = ServiceClient(None, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'v1.0-Beta'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.users = UsersOperations(
            self._client, self.config, self._serialize, self._deserialize)

    def list_user(
            self, orderby=None, select=None, custom_headers=None, raw=False, **operation_config):
        """Get entities from users.

        :param orderby: Order items by property values
        :type orderby: list[str]
        :param select: Select properties to be returned
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Pathsusersgetresponses200contentapplicationJsonschema or
         ClientRawResponse if raw=true
        :rtype:
         ~users.models.Pathsusersgetresponses200contentapplicationJsonschema or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`OdataerrorException<users.models.OdataerrorException>`
        """
        # Construct URL
        url = self.list_user.metadata['url']

        # Construct parameters
        query_parameters = {}
        if self.config.top is not None:
            query_parameters['$top'] = self._serialize.query("self.config.top", self.config.top, 'int', minimum=0)
        if self.config.search is not None:
            query_parameters['$search'] = self._serialize.query("self.config.search", self.config.search, 'str')
        if orderby is not None:
            query_parameters['$orderby'] = self._serialize.query("orderby", orderby, '[str]', div=',', unique=True)
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',', unique=True)

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.OdataerrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Pathsusersgetresponses200contentapplicationJsonschema', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_user.metadata = {'url': '/users'}

    def create_user(
            self, body, custom_headers=None, raw=False, **operation_config):
        """Add new entity to users.

        :param body: New entity
        :type body: ~users.models.Microsoftgraphuser
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Microsoftgraphuser or ClientRawResponse if raw=true
        :rtype: ~users.models.Microsoftgraphuser or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`OdataerrorException<users.models.OdataerrorException>`
        """
        # Construct URL
        url = self.create_user.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body, 'Microsoftgraphuser')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [201]:
            raise models.OdataerrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Microsoftgraphuser', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_user.metadata = {'url': '/users'}

    def get_user(
            self, user_id, select=None, custom_headers=None, raw=False, **operation_config):
        """Get entity from users by key.

        :param user_id: key: user-id of user
        :type user_id: str
        :param select: Select properties to be returned
        :type select: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Microsoftgraphuser or ClientRawResponse if raw=true
        :rtype: ~users.models.Microsoftgraphuser or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`OdataerrorException<users.models.OdataerrorException>`
        """
        # Construct URL
        url = self.get_user.metadata['url']
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]', div=',', unique=True)

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.OdataerrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Microsoftgraphuser', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_user.metadata = {'url': '/users/{user-id}'}

    def update_user(
            self, body, user_id, custom_headers=None, raw=False, **operation_config):
        """Update entity in users.

        :param body: New property values
        :type body: ~users.models.Microsoftgraphuser
        :param user_id: key: user-id of user
        :type user_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`OdataerrorException<users.models.OdataerrorException>`
        """
        # Construct URL
        url = self.update_user.metadata['url']
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body, 'Microsoftgraphuser')

        # Construct and send request
        request = self._client.patch(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [204]:
            raise models.OdataerrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    update_user.metadata = {'url': '/users/{user-id}'}

    def delete_user(
            self, user_id, if_match=None, custom_headers=None, raw=False, **operation_config):
        """Delete entity from users.

        :param user_id: key: user-id of user
        :type user_id: str
        :param if_match: ETag
        :type if_match: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`OdataerrorException<users.models.OdataerrorException>`
        """
        # Construct URL
        url = self.delete_user.metadata['url']
        path_format_arguments = {
            'user-id': self._serialize.url("user_id", user_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if if_match is not None:
            header_parameters['If-Match'] = self._serialize.header("if_match", if_match, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [204]:
            raise models.OdataerrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_user.metadata = {'url': '/users/{user-id}'}
